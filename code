#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <math.h>

typedef struct {
        const char * name;
        int rating;
        long double  distance,lt, lg;
} item_t;
 
item_t item[] = {
        {"Raag", 4.66455174, -74.07867091, 0,5},
        {"Varun", 6.24478548, -75.57050110, 0,2.2},
        {"Prince", 7.06125013, -73.84928550, 0,3},
        {"Neha", 7.88475514, -72.49432589, 0,1},
        {"Nikhil", 3.48835279, -76.51532198, 0,4},
        {"Raftaar", 4.13510880, -73.63690401, 0,2.7},
        {"Baseer", 6.55526689, -73.13373892, 0,2},
};
 
#define n_items (sizeof(item)/sizeof(item_t))
 
typedef struct {
        uint64_t bits;
        int rating;
} solution;


long double toRadians(const long double degree)
{
    long double one_deg = (M_PI) / 180;
    return (one_deg * degree);
}
  
long double Distance(long double lat1, long double long1,
                     long double lat2, long double long2)
{
    lat1 = toRadians(lat1);
    long1 = toRadians(long1);
    lat2 = toRadians(lat2);
    long2 = toRadians(long2);
    long double dlong = long2 - long1;
    long double dlat = lat2 - lat1;
  
    long double ans = pow(sin(dlat / 2), 2) +
                          cos(lat1) * cos(lat2) *
                          pow(sin(dlong / 2), 2);
  
    ans = 2 * asin(sqrt(ans));
    long double R = 6371;
    ans = ans * R;
  
    return ans;
}
 
 
void optimal(long double distance, int idx, solution *s)
{
        solution v1, v2;
        if (idx < 0) {
                s->bits = s->rating = 0;
                return;
        }
 
        if (distance < item[idx].distance) {
                optimal(distance, idx - 1, s);
                return;
         }
 
        optimal(distance, idx - 1, &v1);
        optimal(distance - item[idx].distance, idx - 1, &v2);
 
        v2.rating += item[idx].rating;
        v2.bits |= (1 << idx);
 
        *s = (v1.rating >= v2.rating) ? v1 : v2;
}
void distancecal(item_t *i, int lat, int lon)
{
      for(int j=0; j<n_items; j++)
           i[j].distance=Distance(lat, lon, i[j].lt, i[j].lg)*1000;
}
   
  
 
int main(void)
{
        int i = 0, w = 0;
        long double lt1, lg1;
        char choice= 'y';
        while(choice=='y')
         {
            scanf("%0.15Lf %0.15Lf", &lt1, &lg1);
            distancecal(item, lt1, lg1);
            scanf("%c", &choice);
           
         }
            

        solution s = {0, 0};
        optimal(1955, n_items - 1, &s);
 
        for (i = 0; i < n_items; i++) {
                if (s.bits & (1 << i)) {
                        printf("%s\n", item[i].name);
                        w += item[i].distance;
                }
        }
        return 0;
}
